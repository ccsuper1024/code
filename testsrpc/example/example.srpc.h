#pragma once
#include <stdio.h>
#include <string>
#include "srpc/rpc_define.h"
#include "example.pb.h"

namespace Example
{

/*
 * Server codes
 * Generated by SRPC
 */

class Service : public srpc::RPCService
{
public:
	// please implement these methods in server.cc
	//纯虚函数
	virtual void Echo(EchoRequest *request, EchoResponse *response,
					srpc::RPCContext *ctx) = 0;

public:
	//默认构造函数
	Service();
};

/*
 * Client codes
 * Generated by SRPC
 */

using EchoDone = std::function<void (EchoResponse *, srpc::RPCContext *)>;

class SRPCClient : public srpc::SRPCClient
{
public:
	void Echo(const EchoRequest *req, EchoDone done);
	void Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> async_Echo(const EchoRequest *req);

public:
	SRPCClient(const char *host, unsigned short port);
	SRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCClientTask *create_Echo_task(EchoDone done);
};

class SRPCHttpClient : public srpc::SRPCHttpClient
{
public:
	void Echo(const EchoRequest *req, EchoDone done);
	void Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> async_Echo(const EchoRequest *req);

public:
	SRPCHttpClient(const char *host, unsigned short port);
	SRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCHttpClientTask *create_Echo_task(EchoDone done);
};

class BRPCClient : public srpc::BRPCClient
{
public:
	void Echo(const EchoRequest *req, EchoDone done);
	void Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> async_Echo(const EchoRequest *req);

public:
	BRPCClient(const char *host, unsigned short port);
	BRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::BRPCClientTask *create_Echo_task(EchoDone done);
};

class TRPCClient : public srpc::TRPCClient
{
public:
	void Echo(const EchoRequest *req, EchoDone done);
	void Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> async_Echo(const EchoRequest *req);

public:
	TRPCClient(const char *host, unsigned short port);
	TRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCClientTask *create_Echo_task(EchoDone done);
};

class TRPCHttpClient : public srpc::TRPCHttpClient
{
public:
	void Echo(const EchoRequest *req, EchoDone done);
	void Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> async_Echo(const EchoRequest *req);

public:
	TRPCHttpClient(const char *host, unsigned short port);
	TRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCHttpClientTask *create_Echo_task(EchoDone done);
};

///// implements detials /////

inline Service::Service(): srpc::RPCService("Example")
{
	this->srpc::RPCService::add_method("Echo",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::Echo);
		});
}

inline SRPCClient::SRPCClient(const char *host, unsigned short port):
	srpc::SRPCClient("Example")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCClient::init(&params);
}

inline SRPCClient::SRPCClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCClient("Example")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCClient::init(temp);
}

inline void SRPCClient::Echo(const EchoRequest *req, EchoDone done)
{
	auto *task = this->create_rpc_client_task("Echo", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Echo(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> SRPCClient::async_Echo(const EchoRequest *req)
{
	using RESULT = std::pair<EchoResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<EchoResponse>("Echo", srpc::RPCAsyncFutureCallback<EchoResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCClientTask *SRPCClient::create_Echo_task(EchoDone done)
{
	return this->create_rpc_client_task("Echo", std::move(done));
}

inline SRPCHttpClient::SRPCHttpClient(const char *host, unsigned short port):
	srpc::SRPCHttpClient("Example")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCHttpClient::init(&params);
}

inline SRPCHttpClient::SRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCHttpClient("Example")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCHttpClient::init(temp);
}

inline void SRPCHttpClient::Echo(const EchoRequest *req, EchoDone done)
{
	auto *task = this->create_rpc_client_task("Echo", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Echo(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_Echo(const EchoRequest *req)
{
	using RESULT = std::pair<EchoResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<EchoResponse>("Echo", srpc::RPCAsyncFutureCallback<EchoResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_Echo_task(EchoDone done)
{
	return this->create_rpc_client_task("Echo", std::move(done));
}

inline BRPCClient::BRPCClient(const char *host, unsigned short port):
	srpc::BRPCClient("Example")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::BRPCClient::init(&params);
}

inline BRPCClient::BRPCClient(const struct srpc::RPCClientParams *params):
	srpc::BRPCClient("Example")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::BRPCClient::init(temp);
}

inline void BRPCClient::Echo(const EchoRequest *req, EchoDone done)
{
	auto *task = this->create_rpc_client_task("Echo", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Echo(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> BRPCClient::async_Echo(const EchoRequest *req)
{
	using RESULT = std::pair<EchoResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<EchoResponse>("Echo", srpc::RPCAsyncFutureCallback<EchoResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::BRPCClientTask *BRPCClient::create_Echo_task(EchoDone done)
{
	return this->create_rpc_client_task("Echo", std::move(done));
}

inline TRPCClient::TRPCClient(const char *host, unsigned short port):
	srpc::TRPCClient("Example")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCClient::init(&params);
}

inline TRPCClient::TRPCClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCClient("Example")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCClient::init(temp);
}

inline void TRPCClient::Echo(const EchoRequest *req, EchoDone done)
{
	auto *task = this->create_rpc_client_task("/Example/Echo", std::move(done));

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Echo(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> TRPCClient::async_Echo(const EchoRequest *req)
{
	using RESULT = std::pair<EchoResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<EchoResponse>("/Example/Echo", srpc::RPCAsyncFutureCallback<EchoResponse>);

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCClientTask *TRPCClient::create_Echo_task(EchoDone done)
{
	auto *task = this->create_rpc_client_task("/Example/Echo", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline TRPCHttpClient::TRPCHttpClient(const char *host, unsigned short port):
	srpc::TRPCHttpClient("Example")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCHttpClient::init(&params);
}

inline TRPCHttpClient::TRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCHttpClient("Example")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCHttpClient::init(temp);
}

inline void TRPCHttpClient::Echo(const EchoRequest *req, EchoDone done)
{
	auto *task = this->create_rpc_client_task("Echo", std::move(done));

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::Echo(const EchoRequest *req, EchoResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Echo(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<EchoResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_Echo(const EchoRequest *req)
{
	using RESULT = std::pair<EchoResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<EchoResponse>("Echo", srpc::RPCAsyncFutureCallback<EchoResponse>);

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_Echo_task(EchoDone done)
{
	auto *task = this->create_rpc_client_task("Echo", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

} // end namespace Example

